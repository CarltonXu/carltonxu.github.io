{"meta":{"title":"CarltonXu's Blog","subtitle":"","description":"","author":"CarltonXu","url":"https://carltonxu.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-12-05T16:43:35.147Z","updated":"2020-12-05T16:43:35.147Z","comments":false,"path":"/404.html","permalink":"https://carltonxu.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-12-04T01:51:46.272Z","updated":"2020-12-04T01:51:46.261Z","comments":false,"path":"about/index.html","permalink":"https://carltonxu.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-12-03T16:35:00.317Z","updated":"2020-12-03T16:35:00.317Z","comments":false,"path":"books/index.html","permalink":"https://carltonxu.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-12-03T16:35:00.318Z","updated":"2020-12-03T16:35:00.318Z","comments":false,"path":"categories/index.html","permalink":"https://carltonxu.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-12-03T16:35:00.320Z","updated":"2020-12-03T16:35:00.320Z","comments":true,"path":"links/index.html","permalink":"https://carltonxu.github.io/links/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-12-03T16:35:00.323Z","updated":"2020-12-03T16:35:00.323Z","comments":false,"path":"tags/index.html","permalink":"https://carltonxu.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-12-03T16:35:00.322Z","updated":"2020-12-03T16:35:00.322Z","comments":false,"path":"repository/index.html","permalink":"https://carltonxu.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"VMware部署KVM网络无法通信","slug":"VMware平台部署KVM网络无法通信","date":"2020-12-05T16:32:15.830Z","updated":"2020-12-05T17:09:34.397Z","comments":true,"path":"2020/12/06/VMware平台部署KVM网络无法通信/","link":"","permalink":"https://carltonxu.github.io/2020/12/06/VMware%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2KVM%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E9%80%9A%E4%BF%A1/","excerpt":"","text":"问题描述公司IMAGE镜像BUILD服务器部署在VMware ESXI主机上，启动了一台VMware CentOS7虚拟机，CentOS7虚拟机内部安装了KVM虚拟化，并且在KVM启动了一台虚拟机用来做QCOW镜像制作 CentOS7虚拟机内部创建了一个网桥，启动一台虚拟机，将虚拟机网卡配置为桥接模式，与宿主机网卡桥接在一个网桥上面，配置同一个网段的IP地址，所有配置完毕之后，发现只有KVM宿主机可以虚拟机通信，其他外部10网段的机器不能够与虚拟机通信 问题排查思路先确认KVM宿主机的是否开启了IP地址转发，net.ipv4.ip_forward=1表示开启了网络转发功能，KVM虚拟机配置文件一切正常，模式也为bridege，kvm宿主机网卡配置文件也一切正常，就发现这个问题很奇怪 最终定位问题需要将VMware ESXI主机的网络vswitch开启混杂模式才可以进行通信 文章：https://blog.51cto.com/gjr0512/1626409https://blog.51cto.com/9843231/2294188?source=drh","categories":[{"name":"虚拟化","slug":"虚拟化","permalink":"https://carltonxu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"}],"tags":[{"name":"OpenStack","slug":"OpenStack","permalink":"https://carltonxu.github.io/tags/OpenStack/"},{"name":"VMware","slug":"VMware","permalink":"https://carltonxu.github.io/tags/VMware/"},{"name":"网络","slug":"网络","permalink":"https://carltonxu.github.io/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"CentOS7.2编译安装OpenSSH 7.8","slug":"CentOS7.2编译安装OpenSSH 7.8","date":"2020-12-05T16:24:34.807Z","updated":"2020-12-05T17:14:03.008Z","comments":true,"path":"2020/12/06/CentOS7.2编译安装OpenSSH 7.8/","link":"","permalink":"https://carltonxu.github.io/2020/12/06/CentOS7.2%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OpenSSH%207.8/","excerpt":"","text":"前提条件1、安装openssl、openssh-devel、gcc、gcc-c++、make包 2、安装配置telnet服务，预防ssh卸载后导致无法远程登陆（ssh升级后，再将此包以及服务卸载掉） 安装开发依赖包1yum install -y openssl openssl-devel gcc gcc-c++ make zlib-devel 安装telnet服务安装telnet服务包 12yum -y install telnet telnet-serversystemctl start telnet.socket #启动telnet服务 编译安装OpenSSH卸载老版本OpenSSH包1rpm -e &#96;rpm -qa | grep openssh&#96; 下载openssh源码包12cd &#x2F;rootwget https:&#x2F;&#x2F;openbsd.hk&#x2F;pub&#x2F;OpenBSD&#x2F;OpenSSH&#x2F;portable&#x2F;openssh-7.8p1.tar.gz 解压12tar -zxvf openssh-7.8p1.tar.gz -C .&#x2F;cd openssh-7.8p1&#x2F; 编译1234567.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F; \\ --sysconfdir&#x3D;&#x2F;etc&#x2F;ssh&#x2F; \\ --with-ssl-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;ssl \\ --with-md5-passwords \\ --mandir&#x3D;&#x2F;usr&#x2F;share&#x2F;man&#x2F;Make &amp;&amp; make install 添加systemd服务配置管理文件# 编辑 /usr/lib/systemd/system/sshd.service 添加以下内容 123456789101112131415[Unit]Description&#x3D;OpenSSH server daemonDocumentation&#x3D;man:sshd(8) man:sshd_config(5)After&#x3D;network.target[Service]ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;sshd[Install]WantedBy&#x3D;multi-user.target 启动服务12systemctl enable sshdsystemctl start sshd","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://carltonxu.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://carltonxu.github.io/tags/Linux/"},{"name":"OpenSSH","slug":"OpenSSH","permalink":"https://carltonxu.github.io/tags/OpenSSH/"}]},{"title":"shell 制作自解压文件tar","slug":"shell制作自解压文件tar","date":"2020-12-05T16:04:35.515Z","updated":"2020-12-05T17:08:50.033Z","comments":true,"path":"2020/12/06/shell制作自解压文件tar/","link":"","permalink":"https://carltonxu.github.io/2020/12/06/shell%E5%88%B6%E4%BD%9C%E8%87%AA%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6tar/","excerpt":"","text":"将压缩内容添加到bash脚本如何将压缩内容添加到脚本，可以做到运行脚本时自解压 今天遇到一个bash脚本比较大，大概有60MB，vim打开之后，发现脚本的开头是shell脚本内容，后面全是乱码，比较好奇，然后就分析脚本做了哪些动作，还可以正常执行，下面是脚本的截图 我们看脚本中，第29行看到__ARCHIVE_BELOW__下面全是乱码，根据名字我们也可以分析是一个打包的压缩文件（这是一个标示，不是必须的，可以自定义，只要能脚本开头awk指令能定位解析到就可以） 第9行看到是使用aws进行获取压缩打包内容的开始行，这一行主要是获取压缩打包内容的行号第11行是使用tail获取压缩包大包内容行，然后通过管道将这部分内容tar指令进行解压缩到临时/tmp目录第21行执行其他脚本内容（这里不进行概述）下面我们也模拟这个场景，做一个测试，看下实现效果是怎么样的 编写代码测试本次环境使用的是CentOS7环境，我们在/tmp下创建一个test目录，里面编写脚本以及添加一个打包目录，然后打包压缩添加到脚本中，执行脚本可以自动解压文件到相关目录 创建shell脚本内容如下： 12345678910111213141516#!/bin/bash#TMPDIR=$(mktemp -d)ARCHIVE=$(awk &#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27; &quot;0&quot;)tail -n+$ARCHIVE &quot;$0&quot; | tar -zxvm -C $TMPDIR &gt; /dev/null 2&gt;&amp;1 3&gt;&amp;1if [ $? -eq 0 ]; then echo &quot;Archive success.&quot;else echo &quot;Aarchive failed.&quot;fiexit 0__ARCHIVE_BELOW__ 生成测试文件创建一个/tmp/test/archive目录，里面创建两个目录，并在两个目录下分别生成两个测试文件 12345678910111213venv) [root@carltonxu-dev /tmp/test][13:59:58]# pwd/tmp/test(venv) [root@carltonxu-dev /tmp/test][13:59:59]# mkdir archive(venv) [root@carltonxu-dev /tmp/test][14:00:05]# cd archive/(venv) [root@carltonxu-dev /tmp/test][14:00:43]# echo &quot;This a 01 file&quot; &gt; archive/file01(venv) [root@carltonxu-dev /tmp/test][14:01:10]# echo &quot;This a 02 file&quot; &gt; archive/file02(venv) [root@carltonxu-dev /tmp/test][14:21:35]# tree.|-- archive| |-- file01| `-- file02`-- selfExtracting.sh1 directory, 3 files 目录打包压缩添加至脚本将archive目录进行打包压缩并添加到脚本中，并删除archive目录 12(venv) [root@carltonxu-dev /tmp/test][14:01:51]# tar -zcvm archive &gt;&gt; selfExtracting.sh(venv) [root@carltonxu-dev /tmp/test][14:05:24]# rm -rf archive/ 1selfExtracting.sh file 执行脚本查看执行脚本结果输出成功，/tmp目录生成一个临时的目录，将所有压缩包都放在了这个目录下面，内容都是正常的 123456789101112131415(venv) [root@carltonxu-dev /tmp/test][14:29:57]# bash selfExtracting.shArchive success.(venv) [root@carltonxu-dev /tmp/test][14:30:23]# tree /tmp/tmp.1VmYpEoIbI//tmp/tmp.1VmYpEoIbI/`-- archive |-- file01 `-- file021 directory, 2 files(venv) [root@carltonxu-dev /tmp/test][14:30:27]# cat /tmp/tmp.1VmYpEoIbI/archive/file01This a 01 file(venv) [root@carltonxu-dev /tmp/test][14:30:37]# cat /tmp/tmp.1VmYpEoIbI/archive/file02This a 02 file 总结shell自解压脚本在很多情况下都可以使用，我们可以将自己定义的脚本已经目录文件放在一个里面，远程执行脚本（curl ｜ bash）这样我们就可以执行通过指令直接获取资料，我们生成的脚本，在&gt;&gt;导入大包压缩内容之后，是不能够进行修改的，只要修改之后，此文件就会出现解压失败的情况，这样也可以防止别人篡改我们的文件内容","categories":[{"name":"脚本开发","slug":"脚本开发","permalink":"https://carltonxu.github.io/categories/%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://carltonxu.github.io/tags/Linux/"},{"name":"Shell","slug":"Shell","permalink":"https://carltonxu.github.io/tags/Shell/"}]}],"categories":[{"name":"虚拟化","slug":"虚拟化","permalink":"https://carltonxu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"},{"name":"操作系统","slug":"操作系统","permalink":"https://carltonxu.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"脚本开发","slug":"脚本开发","permalink":"https://carltonxu.github.io/categories/%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"OpenStack","slug":"OpenStack","permalink":"https://carltonxu.github.io/tags/OpenStack/"},{"name":"VMware","slug":"VMware","permalink":"https://carltonxu.github.io/tags/VMware/"},{"name":"网络","slug":"网络","permalink":"https://carltonxu.github.io/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Linux","slug":"Linux","permalink":"https://carltonxu.github.io/tags/Linux/"},{"name":"OpenSSH","slug":"OpenSSH","permalink":"https://carltonxu.github.io/tags/OpenSSH/"},{"name":"Shell","slug":"Shell","permalink":"https://carltonxu.github.io/tags/Shell/"}]}