<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CarltonXu&#39;s Blog</title>
  
  
  <link href="https://carltonxu.github.io/atom.xml" rel="self"/>
  
  <link href="https://carltonxu.github.io/"/>
  <updated>2020-12-05T17:09:34.397Z</updated>
  <id>https://carltonxu.github.io/</id>
  
  <author>
    <name>CarltonXu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VMware部署KVM网络无法通信</title>
    <link href="https://carltonxu.github.io/2020/12/06/VMware%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2KVM%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E9%80%9A%E4%BF%A1/"/>
    <id>https://carltonxu.github.io/2020/12/06/VMware%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2KVM%E7%BD%91%E7%BB%9C%E6%97%A0%E6%B3%95%E9%80%9A%E4%BF%A1/</id>
    <published>2020-12-05T16:32:15.830Z</published>
    <updated>2020-12-05T17:09:34.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>公司IMAGE镜像BUILD服务器部署在VMware ESXI主机上，启动了一台VMware CentOS7虚拟机，CentOS7虚拟机内部安装了KVM虚拟化，并且在KVM启动了一台虚拟机用来做QCOW镜像制作</p><p>CentOS7虚拟机内部创建了一个网桥，启动一台虚拟机，将虚拟机网卡配置为桥接模式，与宿主机网卡桥接在一个网桥上面，配置同一个网段的IP地址，所有配置完毕之后，发现只有KVM宿主机可以虚拟机通信，其他外部10网段的机器不能够与虚拟机通信</p><h3 id="问题排查思路"><a href="#问题排查思路" class="headerlink" title="问题排查思路"></a>问题排查思路</h3><p>先确认KVM宿主机的是否开启了IP地址转发，net.ipv4.ip_forward=1表示开启了网络转发功能，KVM虚拟机配置文件一切正常，模式也为bridege，kvm宿主机网卡配置文件也一切正常，就发现这个问题很奇怪</p><h3 id="最终定位问题"><a href="#最终定位问题" class="headerlink" title="最终定位问题"></a>最终定位问题</h3><p>需要将VMware ESXI主机的网络vswitch开启混杂模式才可以进行通信</p><h4 id="文章："><a href="#文章：" class="headerlink" title="文章："></a>文章：</h4><p><a href="https://blog.51cto.com/gjr0512/1626409">https://blog.51cto.com/gjr0512/1626409</a><br><a href="https://blog.51cto.com/9843231/2294188?source=drh">https://blog.51cto.com/9843231/2294188?source=drh</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;公司IMAGE镜像BUILD服务器部署在VMware ESXI主机上，启动了一台VMware CentOS7虚拟机，Cent</summary>
      
    
    
    
    <category term="虚拟化" scheme="https://carltonxu.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
    <category term="OpenStack" scheme="https://carltonxu.github.io/tags/OpenStack/"/>
    
    <category term="VMware" scheme="https://carltonxu.github.io/tags/VMware/"/>
    
    <category term="网络" scheme="https://carltonxu.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7.2编译安装OpenSSH 7.8</title>
    <link href="https://carltonxu.github.io/2020/12/06/CentOS7.2%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OpenSSH%207.8/"/>
    <id>https://carltonxu.github.io/2020/12/06/CentOS7.2%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85OpenSSH%207.8/</id>
    <published>2020-12-05T16:24:34.807Z</published>
    <updated>2020-12-05T17:08:48.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>1、安装openssl、openssh-devel、gcc、gcc-c++、make包</p><p>2、安装配置telnet服务，预防ssh卸载后导致无法远程登陆（ssh升级后，再将此包以及服务卸载掉）</p><h1 id="安装开发依赖包"><a href="#安装开发依赖包" class="headerlink" title="安装开发依赖包"></a>安装开发依赖包</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel gcc gcc-c++ make zlib-devel</span><br></pre></td></tr></table></figure><h1 id="安装telnet服务"><a href="#安装telnet服务" class="headerlink" title="安装telnet服务"></a>安装telnet服务</h1><p>安装telnet服务包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install telnet telnet-server</span><br><span class="line">systemctl start telnet.socket #启动telnet服务</span><br></pre></td></tr></table></figure><h1 id="编译安装OpenSSH"><a href="#编译安装OpenSSH" class="headerlink" title="编译安装OpenSSH"></a>编译安装OpenSSH</h1><h2 id="卸载老版本OpenSSH包"><a href="#卸载老版本OpenSSH包" class="headerlink" title="卸载老版本OpenSSH包"></a>卸载老版本OpenSSH包</h2><p>rpm -e — <code>rpm -qa | grep openssh</code></p><h2 id="下载openssh源码包"><a href="#下载openssh源码包" class="headerlink" title="下载openssh源码包"></a>下载openssh源码包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;root</span><br><span class="line">wget https:&#x2F;&#x2F;openbsd.hk&#x2F;pub&#x2F;OpenBSD&#x2F;OpenSSH&#x2F;portable&#x2F;openssh-7.8p1.tar.gz</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openssh-7.8p1.tar.gz -C .&#x2F;</span><br><span class="line">cd openssh-7.8p1&#x2F;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;       \</span><br><span class="line"></span><br><span class="line">       --sysconfdir&#x3D;&#x2F;etc&#x2F;ssh&#x2F;    \</span><br><span class="line"></span><br><span class="line">       --with-ssl-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;ssl \</span><br><span class="line"></span><br><span class="line">       --with-md5-passwords     \</span><br><span class="line"></span><br><span class="line">       --mandir&#x3D;&#x2F;usr&#x2F;share&#x2F;man&#x2F;</span><br><span class="line"></span><br><span class="line">Make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h2 id="添加systemd服务配置管理文件"><a href="#添加systemd服务配置管理文件" class="headerlink" title="添加systemd服务配置管理文件"></a>添加systemd服务配置管理文件</h2><p># 编辑 /usr/lib/systemd/system/sshd.service 添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"></span><br><span class="line">Description&#x3D;OpenSSH server daemon</span><br><span class="line"></span><br><span class="line">Documentation&#x3D;man:sshd(8) man:sshd_config(5)</span><br><span class="line"></span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;sshd</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"></span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable sshd</span><br><span class="line">systemctl start sshd</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h1&gt;&lt;p&gt;1、安装openssl、openssh-devel、gcc、gcc-c++、make包&lt;/p&gt;
&lt;p&gt;2、安装配置telne</summary>
      
    
    
    
    <category term="操作系统" scheme="https://carltonxu.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="https://carltonxu.github.io/tags/Linux/"/>
    
    <category term="OpenSSH" scheme="https://carltonxu.github.io/tags/OpenSSH/"/>
    
  </entry>
  
  <entry>
    <title>shell 制作自解压文件tar</title>
    <link href="https://carltonxu.github.io/2020/12/06/shell%E5%88%B6%E4%BD%9C%E8%87%AA%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6tar/"/>
    <id>https://carltonxu.github.io/2020/12/06/shell%E5%88%B6%E4%BD%9C%E8%87%AA%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6tar/</id>
    <published>2020-12-05T16:04:35.515Z</published>
    <updated>2020-12-05T17:08:50.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将压缩内容添加到bash脚本"><a href="#将压缩内容添加到bash脚本" class="headerlink" title="将压缩内容添加到bash脚本"></a>将压缩内容添加到bash脚本</h1><p>如何将压缩内容添加到脚本，可以做到运行脚本时自解压</p><p>今天遇到一个bash脚本比较大，大概有60MB，vim打开之后，发现脚本的开头是shell脚本内容，后面全是乱码，比较好奇，然后就分析脚本做了哪些动作，还可以正常执行，下面是脚本的截图</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gldflynhr2j31xy0omdqw.jpg"></p><p>我们看脚本中，<br>第29行看到__ARCHIVE_BELOW__下面全是乱码，根据名字我们也可以分析是一个打包的压缩文件（这是一个标示，不是必须的，可以自定义，只要能脚本开头awk指令能定位解析到就可以）</p><p>第9行看到是使用aws进行获取压缩打包内容的开始行，这一行主要是获取压缩打包内容的行号<br>第11行是使用tail获取压缩包大包内容行，然后通过管道将这部分内容tar指令进行解压缩到临时/tmp目录<br>第21行执行其他脚本内容（这里不进行概述）<br>下面我们也模拟这个场景，做一个测试，看下实现效果是怎么样的</p><h1 id="编写代码测试"><a href="#编写代码测试" class="headerlink" title="编写代码测试"></a>编写代码测试</h1><p>本次环境使用的是CentOS7环境，我们在/tmp下创建一个test目录，里面编写脚本以及添加一个打包目录，然后打包压缩添加到脚本中，执行脚本可以自动解压文件到相关目录</p><h2 id="创建shell脚本"><a href="#创建shell脚本" class="headerlink" title="创建shell脚本"></a>创建shell脚本</h2><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"></span><br><span class="line"><span class="bash">TMPDIR=$(mktemp -d)</span></span><br><span class="line"></span><br><span class="line">ARCHIVE=$(awk &#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27; &quot;0&quot;)</span><br><span class="line">tail -n+$ARCHIVE &quot;$0&quot; | tar -zxvm -C $TMPDIR &gt; /dev/null 2&gt;&amp;1 3&gt;&amp;1</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo &quot;Archive success.&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;Aarchive failed.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exit 0</span><br><span class="line">__ARCHIVE_BELOW__</span><br></pre></td></tr></table></figure><h2 id="生成测试文件"><a href="#生成测试文件" class="headerlink" title="生成测试文件"></a>生成测试文件</h2><p>创建一个/tmp/test/archive目录，里面创建两个目录，并在两个目录下分别生成两个测试文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">venv) [root@carltonxu-dev /tmp/test][13:59:58]# pwd</span><br><span class="line">/tmp/test</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][13:59:59]# mkdir archive</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:00:05]# cd archive/</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:00:43]# echo &quot;This a 01 file&quot; &gt; archive/file01</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:01:10]# echo &quot;This a 02 file&quot; &gt; archive/file02</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:21:35]# tree</span><br><span class="line">.</span><br><span class="line">|-- archive</span><br><span class="line">|   |-- file01</span><br><span class="line">|   `-- file02</span><br><span class="line">`-- selfExtracting.sh</span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure><h2 id="目录打包压缩添加至脚本"><a href="#目录打包压缩添加至脚本" class="headerlink" title="目录打包压缩添加至脚本"></a>目录打包压缩添加至脚本</h2><p>将archive目录进行打包压缩并添加到脚本中，并删除archive目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:01:51]# tar -zcvm archive &gt;&gt; selfExtracting.sh</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:05:24]# rm -rf archive/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selfExtracting.sh file</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1gldfsl6jfaj31ym0cl41y.jpg"></p><h2 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>查看执行脚本结果输出成功，/tmp目录生成一个临时的目录，将所有压缩包都放在了这个目录下面，内容都是正常的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:29:57]# bash selfExtracting.sh</span><br><span class="line">Archive success.</span><br><span class="line"></span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:30:23]# tree /tmp/tmp.1VmYpEoIbI/</span><br><span class="line">/tmp/tmp.1VmYpEoIbI/</span><br><span class="line">`-- archive</span><br><span class="line">    |-- file01</span><br><span class="line">    `-- file02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 directory, 2 files</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:30:27]# cat /tmp/tmp.1VmYpEoIbI/archive/file01</span><br><span class="line">This a 01 file</span><br><span class="line">(venv) [root@carltonxu-dev /tmp/test][14:30:37]# cat /tmp/tmp.1VmYpEoIbI/archive/file02</span><br><span class="line">This a 02 file</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>shell自解压脚本在很多情况下都可以使用，我们可以将自己定义的脚本已经目录文件放在一个里面，远程执行脚本（curl ｜ bash）这样我们就可以执行通过指令直接获取资料，我们生成的脚本，在&gt;&gt;导入大包压缩内容之后，是不能够进行修改的，只要修改之后，此文件就会出现解压失败的情况，这样也可以防止别人篡改我们的文件内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;将压缩内容添加到bash脚本&quot;&gt;&lt;a href=&quot;#将压缩内容添加到bash脚本&quot; class=&quot;headerlink&quot; title=&quot;将压缩内容添加到bash脚本&quot;&gt;&lt;/a&gt;将压缩内容添加到bash脚本&lt;/h1&gt;&lt;p&gt;如何将压缩内容添加到脚本，可以做到运行脚本时</summary>
      
    
    
    
    <category term="脚本开发" scheme="https://carltonxu.github.io/categories/%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Linux" scheme="https://carltonxu.github.io/tags/Linux/"/>
    
    <category term="Shell" scheme="https://carltonxu.github.io/tags/Shell/"/>
    
  </entry>
  
</feed>
